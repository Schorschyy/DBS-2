--ML 5

SELECT * INTO auftrag3 FROM trommelhelden..quelleAuftrag2011
SELECT * INTO montage3 FROM trommelhelden..quelleMontage2011
--5.

SELECT COUNT(*) FROM auftrag3

--6.
SELECT mitid, COUNT(*)
FROM auftrag3
WHERE anfahrt = 5 and AufDat BETWEEN '2011-01-01' AND '2011-02-01'
GROUP BY mitid

--a
-- sortierter (sort) Zugriff, ESC Select: 1,11332
--b
CREATE INDEX index_name ON auftrag3 (Anfahrt, Aufdat);
--c
-- sortierter Zugriff führt zu einem Inner Join, und von da zu einem Index Seek sowie RID Lookup
-- ESC Select: 0,310799 Warum Unterschiedlich?
-- deutlich weniger Kosten
--d
SELECT mitid, COUNT(*)
FROM auftrag3
WHERE anfahrt = 5 and AufDat BETWEEN '2011-01-01' AND '2011-04-01'
GROUP BY mitid
-- März: ESC Select: 0,525412 
-- April: ESC Select: 0,760089
-- ESC Select und RID Lookup steigen, Sort Kosten und Index Seek sinken
--e
SELECT mitid, COUNT(*)
FROM auftrag3
WHERE anfahrt = 5 and AufDat BETWEEN '2011-01-01' AND '2011-09-01'
GROUP BY mitid
-- der Ablaufplan gleicht dem aus 6.a), sprich der Tabelle ohne Index
-- zu viele Adress Anfragen

--7.
-- a Ich nehme an, dass jeder Ablaufplan gleich ist, sprich Select, Inner Join und dann Table Scan (bzw. parallel Index Scan)

SELECT k.KunNr, k.KunName
FROM kunde k, auftrag3 a
WHERE k.KunNr=a.KunNr
AND a.anfahrt=80

SELECT k.KunNr, k.KunName
FROM kunde k, auftrag3 a
WHERE a.anfahrt=80
AND k.KunNr=a.KunNr

SELECT k.KunNr, k.KunName
FROM kunde k JOIN auftrag3 a ON
k.KunNr=a.KunNr
AND a.anfahrt=80

SELECT k.KunNr, k.KunName
FROM auftrag3 a JOIN kunde k ON
k.KunNr=a.KunNr
AND a.anfahrt=80

-- b Annahme ist richtig

--8
SELECT a.aufnr, erldat, k.kunort, SUM(anzahl * etpreis)
FROM auftrag3 a
 JOIN montage3 m ON a.aufnr = m.aufnr
 JOIN ersatzteil e ON m.etid = e.etid
 JOIN mitarbeiter ma ON a.mitid = ma.mitid
 JOIN kunde k ON a.kunnr = k.kunnr
GROUP BY a.aufnr, erldat, k.kunort
--a
--ESC 3,85162
SET SHOWPLAN_ALL OFF
--ESC 41560,9  t = 16:23
--b
--c
 SET FORCEPLAN ON
--d
SELECT a.aufnr, erldat, k.kunort, SUM(anzahl * etpreis)
FROM auftrag3 a
 JOIN montage3 m ON a.aufnr = m.aufnr
 JOIN ersatzteil e ON m.etid = e.etid
 JOIN mitarbeiter ma ON a.mitid = ma.mitid
 JOIN kunde k ON a.kunnr = k.kunnr
GROUP BY a.aufnr, erldat, k.kunort

-- Man kann feststellen, dass, dadurch dass die automatische Optimierung ignoriert wird, das Erstellen der Abfrage wesentlich aufwendiger ist.
-- Der Ablaufplan ist ebenfalls etwas weiter/größer
