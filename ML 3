--MEILENSTEIN 3

--Aufgabe 1
--Skalar
Create function Anfahrtspreis(@Anfahrt int)
Returns decimal(5,2)
As
	Begin
	Declare @Anfahrtpreis decimal(5,2)
	Set @Anfahrtpreis = 2.5 * @Anfahrt + 30
	Return @Anfahrtpreis
	End

Select AufNr, Anfahrt, dbo.Anfahrtspreis(Anfahrt) as Anfahrtspreis from Auftrag Where Anfahrt is not null

--Tabelle
Create function MindestET (@Mindestbestand int)
Returns @table Table
( EtID char(5),
  EtBezeichnung char(30),
  EtAnzLager int
)
As
Begin
	Insert into @table
	Select EtID, EtBezeichnung, EtAnzLager
	From Ersatzteil
	Where EtAnzLager < @Mindestbestand
	Return
End

Declare @Mindest int
Set @Mindest = 50
Select EtID, EtBezeichnung, EtAnzLager From MindestET(@Mindest)

--Aufgabe 2
--2.1 Default
Alter Table Mitarbeiter Add Constraint DF_Tätigkeit Default 'Monteur' For MitJob
Select * from Mitarbeiter
Insert into Mitarbeiter (MitID, MitName, MitVorname, MitGebDat, MitStundensatz, NLNr) Values (113, 'Kuehnel', 'Georg', GetDate(), 80, 1)
Delete from Mitarbeiter where MitID = 113

Alter Table Auftrag Add Constraint DF_Eingang Default Getdate() For AufDat
Select * from Auftrag
Insert into Auftrag (Aufnr, MitID, KunNr) Values (14000, 113, 1501)
Delete from Auftrag where Aufnr = 14000

--2.2 Check
Alter Table Auftrag Add Constraint CK_Datum Check (datediff(day, AufDat, ErlDat) >= 0)
Select * from Auftrag

Select * from Mitarbeiter
Alter Table Mitarbeiter Add Constraint CK_MitID Check (MitID between 100 and 999)
LIKE '[0-9][0-9][0-9]'
--Test
Insert into Mitarbeiter (MitID, MitName, MitVorname, MitGebDat, MitStundensatz, NLNr) Values (1, 'Kuehnel', 'Georg', GetDate(), 80, 1)

--2.3 Foreign Key

--1. Option: Löschen per Randleiste (Tables > Montage > Keys)
--2. Option:
Alter table Montage drop constraint <old key> 

Alter table Montage add constraint fk_Aufnr foreign key (Aufnr) references Auftrag(Aufnr) on Delete Cascade
Select * from Auftrag
Select * from Montage

Delete from Auftrag Where month(AufDat) = 5 and day(AufDat) = (Select Min(day(AufDat)) from Auftrag Where month(AufDat)=5)

--Aufgabe 3
--3.1 Stundensatz 

CREATE TRIGGER Stundensatz_Trigger
ON Mitarbeiter
AFTER
INSERT, UPDATE
AS 
IF ((Select COUNT(*) From Inserted m where (m.MitJob LIKE 'Monteur' or m.MitJob like 'Meister') and m.MitStundensatz  is null) > 0)
BEGIN 
RAISError ('Für Meister und Monteure müssen Stundensätze angegeben werden', 16, 10)
ROLLBACK
End

--a) funktioniert UFF
Insert into Mitarbeiter (MitID, MitName, MitVorname, MitGebDat, MitJob) Values (114, 'Schumann', 'Paul', GetDate(), 'Azubi')
--b) funktioniert UFF
Update Mitarbeiter set MitJob = 'Meister' Where MitID = 114
--c) funktioniert
Update Mitarbeiter set MitJob = 'Monteur', MitStundensatz = 80 Where MitID = 114
Select * from Mitarbeiter

delete from Mitarbeiter where mitID = 114

--3.2 Erledigte Aufträge
Select * from Auftrag
Create Trigger Abbuchung
On Rechnung For Insert as
If (Select Count(*) from inserted join Auftrag on inserted.aufnr = auftrag.aufnr Where  ErlDat is Null or Dauer is Null or Anfahrt is Null) > 0
	Begin 
		Raiserror('Abbuchung nicht möglich, es fehlen noch Angaben', 16, 10)
		Select * from Auftrag Where ErlDat is Null or Dauer is Null or Anfahrt is Null
		Rollback Transaction
		Return
	End
If (Select Count(*) from Rechnung r Join Auftrag a on r.AufNr = a.AufNr Where 2.50 * a.Anfahrt > r.RechBetrag) > 0
	Begin
		Raiserror('Abbuchung nicht möglich, Anfahrtskosten sind größer als der Rechnungsbetrag', 16, 10)
		Select * from Rechnung r Join Auftrag a on r.AufNr = a.AufNr Where 2.50 * a.Anfahrt > r.RechBetrag
		Rollback Transaction
		Return
	End

drop Trigger Abbuchung

--a)
Select * from Rechnung
Select *, 2.50 * Anfahrt as Kosten from Auftrag Where Aufnr = 10050

Insert into Rechnung values(1281, 10026, '15.10.2022', 154.50) --geht nicht
Insert into Rechnung values(1152, 10218, '15.10.2022', 180.00) --geht nicht 
Insert into Rechnung values(1213, 10164, '16.10.2022', 65.00) --geht

--b)
--2/3 Anfahrt > Rechnung
INSERT INTO Rechnung SELECT KunNr, AufNr, Erldat, 180  -- geht nicht, trigger Abbuchung greift
FROM Auftrag WHERE AufNr IN (10050,10052,10060)
--
INSERT INTO rechnung SELECT kunnr, aufnr, erldat, 135  -- geht
FROM auftrag WHERE aufnr IN (10056,10059,10061)

--3.3 Protokollierung
--a)
Alter table Auftrag alter column Beschreibung varchar(200)
--b)
Create Table Protokoll_Auftrag_Tabelle
(AufNr int not Null,
MitID char(3) Null,
KunNr int not Null,
AufDat date not Null,
ErlDat date Null,
Dauer decimal(5, 1) null,
Anfahrt int null,
Beschreibung varchar(200) null,
Benutzer CHAR(20) NULL,
Zeit DATETIME NULL,
Änderung VARCHAR(100))

Create Table Protokoll_Montage_Tabelle
(EtID char(5) not Null,
AufNr int not Null,
Anzahl int not Null,
Benutzer CHAR(20) Null,
Zeit DATETIME Null,
Änderung VARCHAR(100))

--c)
CREATE TRIGGER LöschProtokoll on Auftrag
For Delete As
	Begin 
		Select * from Auftrag
		Raiserror('Abbruch, Trigger funktioniert (Auftrag)', 16, 10)
		Rollback
	End

CREATE TRIGGER LöschProtokoll_Montage on Montage
For Delete As
	Begin 
		Select * from deleted
		Raiserror('Abbruch, Trigger funktioniert (Montage)', 16, 10)
		Rollback
	End


--e)
Disable Trigger LöschProtokoll on Auftrag
Disable Trigger LöschProtokoll_Montage on Montage

Create Trigger Protokoll_Auftrag on Auftrag
For Delete As
	Begin
		Insert into Protokoll_Auftrag_Tabelle 
		Select *, SYSTEM_USER, Getdate(), 'delete'
		From deleted
	End

Create Trigger Protokoll_Montage on Montage
For Delete As
	Begin
		Insert into Protokoll_Montage_Tabelle 
		Select *, SYSTEM_USER, Getdate(), 'delete'
		From deleted
	End

Delete from Auftrag where AufDat = '2022-05-11'	
Select * from Protokoll_Montage_Tabelle
Select * from Protokoll_Auftrag_Tabelle 

--f)
Begin Transaction
	Delete from Auftrag where month(ErlDat) = 5
	Select * from Protokoll_Auftrag_Tabelle
	Select * from Protokoll_Montage_Tabelle
	Rollback
